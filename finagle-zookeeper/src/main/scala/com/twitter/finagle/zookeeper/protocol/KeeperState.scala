package com.twitter.finagle.zookeeper.protocol

sealed abstract class KeeperState(val code: Int)
object KeeperState {
  /** Unused, this state is never generated by the server */
  @Deprecated
  object Unknown extends KeeperState(-1)

  /** The client is in the disconnected state - it is not connected
   * to any server in the ensemble. */
  object Disconnected extends KeeperState(0)

  /** Unused, this state is never generated by the server */
  @Deprecated
  object NoSyncConnected extends KeeperState(1)

  /** The client is in the connected state - it is connected
   * to a server in the ensemble (one of the servers specified
   * in the host connection parameter during ZooKeeper client
   * creation). */
  object SyncConnected extends KeeperState(3)

  /**
   * Auth failed state
   */
  object AuthFailed extends KeeperState(4)

  /**
   * The client is connected to a read-only server, that is the
   * server which is not currently connected to the majority.
   * The only operations allowed after receiving this state is
   * read operations.
   * This state is generated for read-only clients only since
   * read/write clients aren't allowed to connect to r/o servers.
   */
  object ConnectedReadOnly extends KeeperState(5)

  /**
    * SaslAuthenticated: used to notify clients that they are SASL-authenticated,
    * so that they can perform Zookeeper actions with their SASL-authorized permissions.
    */
  object SaslAuthenticated extends KeeperState(6)

  /** The serving cluster has expired this session. The ZooKeeper
   * client connection (the session) is no longer valid. You must
   * create a new client connection (instantiate a new ZooKeeper
   * instance) if you with to access the ensemble. */
  object Expired extends KeeperState(-112)

  def apply(code: Int): KeeperState = code match {
    case -1 => Unknown
    case 0 => Disconnected
    case 1 => NoSyncConnected
    case 3 => SyncConnected
    case 4 => AuthFailed
    case 5 => ConnectedReadOnly
    case 6 => SaslAuthenticated
    case -112 => Expired
  }
}

